#include "player.h"
#include <stdlib.h>
#include "headclass.h"
#include "texture.h"
#include <math.h>
#include <fstream>
#include <time.h>
#include <windows.h>		
#include <gl\gl.h>	
//#include "fmod.h"

using namespace std;

playerclass::playerclass()
{
	srand( time(NULL) );
	newlevel = FSOUND_Sample_Load(FSOUND_UNMANAGED, "Data/new_level.wav", FSOUND_NORMAL, 0);
	Score = 0;
	Level = 0;
	GameOver = false;
	for (int i = 0; i < 3; i++) {
		InputString[i] = 0;
	}
	InputCount = 0;
	Inputting = false;
	InputPlace = 0;
	timeelapsed = 0.0f;
	untilstart = 3.0f;
	FloatScore = 0, TotalSpeed = 55.0f;
	Paused = false, GameOver = false;
	do {
		Red = rand()%100/100.0f;
		Green = rand()%100/100.0f;
		Blue = rand()%100/100.0f;
	} while ((Red+Green+Blue < 1.0f || Red+Green+Blue > 1.5f) ||
		(Red < 0.7f && Green < 0.7f && Blue < 0.7f));

	Levelgap = 300; NewLevel = 300;
	playedfightsound = false;
	BonusTimer = 0.0f;

	ifstream fin("Data/Sresource.lpb");
	for (i = 0; i < 5; i++) {
		fin >> highscore[i];
		fin >> highscorename[i][0];
		fin >> highscorename[i][1];
		fin >> highscorename[i][2];
	}
	fin.close();

}

playerclass::~playerclass()
{
	FSOUND_Sample_Free(newlevel);
	ofstream fout("Data/Sresource.lpb");
	for (int i = 0; i < 5; i++) {
		fout << highscore[i];
		fout << ' ';
		fout << highscorename[i][0];
		fout << highscorename[i][1];
		fout << highscorename[i][2];
		fout << '\n';
	}
	fout << "\n\n";
	fout << "***Generated by glTetris - Do Not Edit!***";
	fout.close();
}

bool playerclass::MonitorLevel(float scalar, textureclass *texture)
{
	static float LevelTime = 0.0f;
	if (Score > FloatScore)       //level system
		FloatScore+=float(scalar)*85.0f;
	if (int(FloatScore/NewLevel) == 1) {
		TotalSpeed += (18.0f*Level);
		Levelgap+=300;
		Level++;
		LevelTime = 2.0f;
		NewLevel+=Levelgap;
		FSOUND_PlaySound(FSOUND_FREE, newlevel);
		float tempRed = 0, tempGreen = 0, tempBlue = 0;
		do {
			tempRed = rand()%100/100.0f;
			tempGreen = rand()%100/100.0f;
			tempBlue = rand()%100/100.0f;
		} while ((tempRed+tempGreen+tempBlue < 1.0f || tempRed+tempGreen+tempBlue > 1.5f) ||
			(tempRed < 0.7f && tempGreen < 0.7f && tempBlue < 0.7f) || (fabs(tempRed-Red) + fabs(tempGreen-Green) + fabs(tempBlue-Blue) < 0.8f));
		Red = tempRed;
		Green = tempGreen;
		Blue = tempBlue;
		return true;
	}
	if (BonusTimer > 0.0f)
		BonusTimer-=scalar;
	else
		BonusTimer = 0.0f;
	if (LevelTime > 0.0f) {
		glEnable(GL_TEXTURE_2D);
		glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
		glColor4f(1.0f, 1.0f, 1.0f, LevelTime/2.0f);
		texture[2].glPrint(1.1+sinf(LevelTime), 640*(LevelTime/2.0f), 225.0f, 0, "Level Up!");
		LevelTime-=scalar;
		glDisable(GL_TEXTURE_2D);
		glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
	}
	return false;
}

int playerclass::calculatefps(double scalar)
{
	static int temp;
	static double fpstime = 0;
	fpstime+=scalar;
	temp++;
	static int fps = 0;
	if (fpstime > 1.0)
	{
		fpstime = 0.0;
		fps = temp;
		temp = 0;
	}
	return fps;
}
